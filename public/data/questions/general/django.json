{
  "technology": "django",
  "questions": [
    {
      "id": 10000,
      "tag": "django",
      "question": "Explain Django's MVT (Model-View-Template) architecture and how it differs from traditional MVC patterns.",
      "answer": "Django follows the MVT (Model-View-Template) architecture, which is Django's interpretation of the MVC pattern:\n\n**Model**: Represents the data layer and business logic. Django models are Python classes that define database structure and include methods for data manipulation.\n\n**View**: Contains the application logic and acts as a bridge between models and templates. Views process requests, interact with models, and return responses.\n\n**Template**: Handles the presentation layer, defining how data is displayed to users. Templates are HTML files with Django template language syntax.\n\n**Key differences from MVC:**\n- Django's 'View' corresponds to MVC's 'Controller'\n- Django's 'Template' corresponds to MVC's 'View'\n- The URL dispatcher acts as the front controller\n\n```python\n# Model (models.py)\nclass Article(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n# View (views.py)\ndef article_list(request):\n    articles = Article.objects.all()\n    return render(request, 'articles/list.html', {'articles': articles})\n\n# Template (list.html)\n{% for article in articles %}\n    <h2>{{ article.title }}</h2>\n    <p>{{ article.content }}</p>\n{% endfor %}\n```\n\nThis separation ensures maintainable, scalable applications with clear responsibility boundaries.",
      "keywords": ["MVT", "MVC", "architecture", "model", "view", "template", "separation of concerns"],
      "difficulty": "easy"
    },
    {
      "id": 10001,
      "tag": "django",
      "question": "What are Django models and how does the Django ORM work? Provide examples of common model operations.",
      "answer": "Django models are Python classes that define the structure and behavior of database tables. The Django ORM (Object-Relational Mapping) provides a Pythonic way to interact with databases without writing raw SQL.\n\n**Key Features:**\n- Automatic SQL generation\n- Database abstraction layer\n- Built-in query optimization\n- Relationship handling\n\n**Common Model Operations:**\n\n```python\n# Model Definition\nclass User(models.Model):\n    username = models.CharField(max_length=150, unique=True)\n    email = models.EmailField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    is_active = models.BooleanField(default=True)\n\n    def __str__(self):\n        return self.username\n\n# Create\nuser = User.objects.create(username='john', email='john@example.com')\n# or\nuser = User(username='jane', email='jane@example.com')\nuser.save()\n\n# Read\nall_users = User.objects.all()\nactive_users = User.objects.filter(is_active=True)\nspecific_user = User.objects.get(username='john')\n\n# Update\nUser.objects.filter(username='john').update(email='newemail@example.com')\n# or\nuser = User.objects.get(username='john')\nuser.email = 'updated@example.com'\nuser.save()\n\n# Delete\nUser.objects.filter(username='john').delete()\n```\n\nThe ORM handles database migrations, relationship queries, and provides a consistent API across different database backends.",
      "keywords": ["ORM", "models", "database", "QuerySet", "CRUD", "migrations"],
      "difficulty": "easy"
    },
    {
      "id": 10002,
      "tag": "django",
      "question": "Explain Django URL routing and the difference between function-based views (FBVs) and class-based views (CBVs).",
      "answer": "Django URL routing maps URLs to views through URL patterns defined in `urls.py` files. The URL dispatcher uses regular expressions or path converters to match incoming requests.\n\n**URL Routing:**\n\n```python\n# urls.py\nfrom django.urls import path, include\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('articles/', views.article_list, name='article_list'),\n    path('articles/<int:id>/', views.article_detail, name='article_detail'),\n    path('api/', include('api.urls')),\n]\n```\n\n**Function-Based Views (FBVs):**\n\n```python\ndef article_list(request):\n    if request.method == 'GET':\n        articles = Article.objects.all()\n        return render(request, 'articles/list.html', {'articles': articles})\n    elif request.method == 'POST':\n        # Handle POST request\n        pass\n```\n\n**Class-Based Views (CBVs):**\n\n```python\nfrom django.views.generic import ListView, DetailView\n\nclass ArticleListView(ListView):\n    model = Article\n    template_name = 'articles/list.html'\n    context_object_name = 'articles'\n    paginate_by = 10\n\nclass ArticleDetailView(DetailView):\n    model = Article\n    template_name = 'articles/detail.html'\n```\n\n**Key Differences:**\n- **FBVs**: Simple, explicit, easier for beginners\n- **CBVs**: More reusable, built-in functionality, inheritance-based\n- **CBVs** provide generic views for common patterns (ListView, CreateView, UpdateView)\n- **FBVs** offer more granular control for complex logic",
      "keywords": ["URL routing", "function-based views", "class-based views", "URLconf", "path converters"],
      "difficulty": "easy"
    },
    {
      "id": 10003,
      "tag": "django",
      "question": "How do Django templates work? Explain template inheritance and common template tags and filters.",
      "answer": "Django templates are HTML files with embedded Django Template Language (DTL) that separates presentation from business logic. Templates support inheritance, tags, filters, and context variables.\n\n**Template Inheritance:**\n\n```html\n<!-- base.html -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>{% block title %}My Site{% endblock %}</title>\n</head>\n<body>\n    <nav>\n        <a href=\"{% url 'home' %}\">Home</a>\n        <a href=\"{% url 'articles' %}\">Articles</a>\n    </nav>\n    \n    <main>\n        {% block content %}\n        {% endblock %}\n    </main>\n    \n    <footer>\n        {% block footer %}\n        <p>&copy; 2024 My Website</p>\n        {% endblock %}\n    </footer>\n</body>\n</html>\n\n<!-- article_list.html -->\n{% extends 'base.html' %}\n\n{% block title %}Articles - {{ block.super }}{% endblock %}\n\n{% block content %}\n    <h1>Articles</h1>\n    {% for article in articles %}\n        <div class=\"article\">\n            <h2>{{ article.title }}</h2>\n            <p>{{ article.content|truncatewords:30 }}</p>\n            <small>{{ article.created_at|date:\"F d, Y\" }}</small>\n        </div>\n    {% empty %}\n        <p>No articles found.</p>\n    {% endfor %}\n{% endblock %}\n```\n\n**Common Tags and Filters:**\n\n```html\n<!-- Control flow -->\n{% if user.is_authenticated %}\n    Welcome, {{ user.username }}!\n{% else %}\n    Please log in.\n{% endif %}\n\n<!-- Loops -->\n{% for item in items %}\n    {{ forloop.counter }}. {{ item.name }}\n{% endfor %}\n\n<!-- Filters -->\n{{ text|upper }}  <!-- Uppercase -->\n{{ date|date:\"Y-m-d\" }}  <!-- Date formatting -->\n{{ content|safe }}  <!-- Render HTML -->\n{{ list|length }}  <!-- Get length -->\n```\n\nTemplate inheritance promotes DRY principles and consistent layouts across applications.",
      "keywords": ["templates", "template inheritance", "DTL", "template tags", "filters", "blocks"],
      "difficulty": "easy"
    },
    {
      "id": 10004,
      "tag": "django",
      "question": "Explain Django forms, form validation, and how to handle form data in views.",
      "answer": "Django forms provide a powerful way to handle HTML forms, validate data, and convert form data to Python types. Forms can be defined as classes and include built-in validation and security features.\n\n**Form Definition:**\n\n```python\n# forms.py\nfrom django import forms\nfrom django.contrib.auth.models import User\n\nclass ContactForm(forms.Form):\n    name = forms.CharField(max_length=100)\n    email = forms.EmailField()\n    subject = forms.CharField(max_length=200)\n    message = forms.CharField(widget=forms.Textarea)\n    \n    def clean_email(self):\n        email = self.cleaned_data['email']\n        if User.objects.filter(email=email).exists():\n            raise forms.ValidationError(\"This email is already registered.\")\n        return email\n\nclass UserRegistrationForm(forms.ModelForm):\n    password = forms.CharField(widget=forms.PasswordInput)\n    password_confirm = forms.CharField(widget=forms.PasswordInput)\n    \n    class Meta:\n        model = User\n        fields = ['username', 'email', 'first_name', 'last_name']\n    \n    def clean(self):\n        cleaned_data = super().clean()\n        password = cleaned_data.get('password')\n        password_confirm = cleaned_data.get('password_confirm')\n        \n        if password and password_confirm and password != password_confirm:\n            raise forms.ValidationError(\"Passwords don't match.\")\n        return cleaned_data\n```\n\n**Handling Forms in Views:**\n\n```python\n# views.py\ndef contact_view(request):\n    if request.method == 'POST':\n        form = ContactForm(request.POST)\n        if form.is_valid():\n            # Process form data\n            name = form.cleaned_data['name']\n            email = form.cleaned_data['email']\n            # Send email, save to database, etc.\n            return redirect('success')\n    else:\n        form = ContactForm()\n    \n    return render(request, 'contact.html', {'form': form})\n```\n\n**Template Rendering:**\n\n```html\n<form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Submit</button>\n</form>\n```\n\nDjango forms automatically handle CSRF protection, HTML generation, and data validation.",
      "keywords": ["forms", "validation", "ModelForm", "cleaned_data", "CSRF", "form handling"],
      "difficulty": "easy"
    },
    {
      "id": 10005,
      "tag": "django",
      "question": "What is Django Admin and how do you customize it? Explain model registration and admin interface customization.",
      "answer": "Django Admin is an automatic admin interface for Django models that provides a web-based interface for managing application data. It's generated automatically from your models and can be extensively customized.\n\n**Basic Model Registration:**\n\n```python\n# admin.py\nfrom django.contrib import admin\nfrom .models import Article, Category, Author\n\n# Simple registration\nadmin.site.register(Article)\n\n# Custom Admin Class\nclass ArticleAdmin(admin.ModelAdmin):\n    list_display = ['title', 'author', 'category', 'created_at', 'is_published']\n    list_filter = ['category', 'is_published', 'created_at']\n    search_fields = ['title', 'content']\n    prepopulated_fields = {'slug': ('title',)}\n    date_hierarchy = 'created_at'\n    ordering = ['-created_at']\n    \n    fieldsets = (\n        ('Basic Information', {\n            'fields': ('title', 'slug', 'author')\n        }),\n        ('Content', {\n            'fields': ('content', 'excerpt')\n        }),\n        ('Metadata', {\n            'fields': ('category', 'tags', 'is_published'),\n            'classes': ('collapse',)\n        })\n    )\n    \n    def get_queryset(self, request):\n        qs = super().get_queryset(request)\n        if request.user.is_superuser:\n            return qs\n        return qs.filter(author=request.user)\n\nadmin.site.register(Article, ArticleAdmin)\n```\n\n**Advanced Customization:**\n\n```python\nclass CategoryAdmin(admin.ModelAdmin):\n    list_display = ['name', 'article_count']\n    \n    def article_count(self, obj):\n        return obj.articles.count()\n    article_count.short_description = 'Articles'\n    \n    actions = ['make_featured']\n    \n    def make_featured(self, request, queryset):\n        queryset.update(is_featured=True)\n        self.message_user(request, f\"{queryset.count()} categories marked as featured.\")\n    make_featured.short_description = \"Mark selected categories as featured\"\n\n# Inline editing\nclass ArticleInline(admin.TabularInline):\n    model = Article\n    extra = 1\n\nclass AuthorAdmin(admin.ModelAdmin):\n    inlines = [ArticleInline]\n    list_display = ['name', 'email', 'article_count']\n```\n\nDjango Admin provides authentication, permissions, and a complete CRUD interface with minimal configuration.",
      "keywords": ["Django Admin", "ModelAdmin", "customization", "list_display", "fieldsets", "inlines"],
      "difficulty": "easy"
    },
    {
      "id": 10006,
      "tag": "django",
      "question": "Explain Django middleware and the request/response cycle. How do you create custom middleware?",
      "answer": "Django middleware is a framework of hooks into Django's request/response processing. It's a lightweight plugin system for globally altering Django's input or output. Middleware components are executed in order during request processing and in reverse order during response processing.\n\n**Request/Response Cycle:**\n1. URL Resolution\n2. Middleware (process_request)\n3. View Processing\n4. Middleware (process_response)\n5. HTTP Response\n\n**Built-in Middleware Examples:**\n- SecurityMiddleware: Adds security headers\n- SessionMiddleware: Handles sessions\n- AuthenticationMiddleware: Associates users with requests\n- CsrfViewMiddleware: CSRF protection\n\n**Creating Custom Middleware:**\n\n```python\n# middleware.py\nimport time\nimport logging\nfrom django.utils.deprecation import MiddlewareMixin\n\nclass RequestTimingMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        start_time = time.time()\n        \n        # Process request\n        response = self.get_response(request)\n        \n        # Process response\n        duration = time.time() - start_time\n        response['X-Request-Duration'] = str(duration)\n        \n        return response\n\nclass LoggingMiddleware(MiddlewareMixin):\n    def process_request(self, request):\n        logging.info(f\"Request: {request.method} {request.path}\")\n        \n    def process_response(self, request, response):\n        logging.info(f\"Response: {response.status_code}\")\n        return response\n        \n    def process_exception(self, request, exception):\n        logging.error(f\"Exception: {exception}\")\n        return None\n\nclass CustomHeaderMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        # Add custom header to request\n        request.custom_header = 'Custom Value'\n        \n        response = self.get_response(request)\n        \n        # Add custom header to response\n        response['X-Custom-Header'] = 'My App'\n        return response\n```\n\n**Settings Configuration:**\n\n```python\n# settings.py\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'myapp.middleware.RequestTimingMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'myapp.middleware.LoggingMiddleware',\n    # ... other middleware\n]\n```\n\nMiddleware is powerful for cross-cutting concerns like authentication, logging, caching, and request modification.",
      "keywords": ["middleware", "request/response cycle", "process_request", "process_response", "custom middleware"],
      "difficulty": "medium"
    },
    {
      "id": 10007,
      "tag": "django",
      "question": "How does Django handle user authentication and permissions? Explain the built-in authentication system and custom user models.",
      "answer": "Django provides a comprehensive authentication system with built-in User model, authentication backends, permissions, and groups. It handles user registration, login, logout, and authorization.\n\n**Built-in Authentication System:**\n\n```python\n# views.py\nfrom django.contrib.auth import authenticate, login, logout\nfrom django.contrib.auth.decorators import login_required, permission_required\nfrom django.contrib.auth.models import User, Group\n\ndef login_view(request):\n    if request.method == 'POST':\n        username = request.POST['username']\n        password = request.POST['password']\n        user = authenticate(request, username=username, password=password)\n        if user is not None:\n            login(request, user)\n            return redirect('dashboard')\n    return render(request, 'login.html')\n\n@login_required\ndef dashboard_view(request):\n    return render(request, 'dashboard.html')\n\n@permission_required('myapp.can_edit_article')\ndef edit_article(request, article_id):\n    # Only users with specific permission can access\n    pass\n```\n\n**Custom User Model:**\n\n```python\n# models.py\nfrom django.contrib.auth.models import AbstractUser, AbstractBaseUser, PermissionsMixin\nfrom django.contrib.auth.base_user import BaseUserManager\n\nclass CustomUserManager(BaseUserManager):\n    def create_user(self, email, password=None, **extra_fields):\n        if not email:\n            raise ValueError('Email is required')\n        email = self.normalize_email(email)\n        user = self.model(email=email, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n\n    def create_superuser(self, email, password=None, **extra_fields):\n        extra_fields.setdefault('is_staff', True)\n        extra_fields.setdefault('is_superuser', True)\n        return self.create_user(email, password, **extra_fields)\n\nclass CustomUser(AbstractBaseUser, PermissionsMixin):\n    email = models.EmailField(unique=True)\n    first_name = models.CharField(max_length=30)\n    last_name = models.CharField(max_length=30)\n    is_active = models.BooleanField(default=True)\n    is_staff = models.BooleanField(default=False)\n    date_joined = models.DateTimeField(auto_now_add=True)\n    \n    objects = CustomUserManager()\n    \n    USERNAME_FIELD = 'email'\n    REQUIRED_FIELDS = ['first_name', 'last_name']\n```\n\n**Permissions and Groups:**\n\n```python\n# Models with custom permissions\nclass Article(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    \n    class Meta:\n        permissions = [\n            ('can_publish', 'Can publish articles'),\n            ('can_feature', 'Can feature articles'),\n        ]\n\n# Checking permissions in views\nfrom django.contrib.auth.mixins import LoginRequiredMixin, PermissionRequiredMixin\n\nclass ArticleCreateView(LoginRequiredMixin, PermissionRequiredMixin, CreateView):\n    model = Article\n    permission_required = 'myapp.add_article'\n```\n\n**Settings Configuration:**\n\n```python\n# settings.py\nAUTH_USER_MODEL = 'myapp.CustomUser'\n\nAUTHENTICATION_BACKENDS = [\n    'django.contrib.auth.backends.ModelBackend',\n    'myapp.backends.EmailBackend',  # Custom backend\n]\n\nLOGIN_URL = '/login/'\nLOGIN_REDIRECT_URL = '/dashboard/'\nLOGOUT_REDIRECT_URL = '/'\n```\n\nDjango's authentication system is flexible and can be extended for complex authorization requirements.",
      "keywords": ["authentication", "User model", "permissions", "groups", "login_required", "custom user"],
      "difficulty": "medium"
    },
    {
      "id": 10008,
      "tag": "django",
      "question": "What is Django REST Framework (DRF)? Explain serializers, viewsets, and how to build REST APIs.",
      "answer": "Django REST Framework (DRF) is a powerful toolkit for building Web APIs in Django. It provides serializers for data conversion, generic views for common patterns, authentication, permissions, and browsable API interface.\n\n**Installation and Setup:**\n\n```python\n# settings.py\nINSTALLED_APPS = [\n    # ...\n    'rest_framework',\n]\n\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework.authentication.TokenAuthentication',\n    ],\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 20\n}\n```\n\n**Serializers:**\n\n```python\n# serializers.py\nfrom rest_framework import serializers\nfrom .models import Article, Category\n\nclass CategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Category\n        fields = ['id', 'name', 'description']\n\nclass ArticleSerializer(serializers.ModelSerializer):\n    author = serializers.StringRelatedField(read_only=True)\n    category = CategorySerializer(read_only=True)\n    category_id = serializers.IntegerField(write_only=True)\n    \n    class Meta:\n        model = Article\n        fields = ['id', 'title', 'content', 'author', 'category', 'category_id', 'created_at']\n        read_only_fields = ['created_at']\n    \n    def validate_title(self, value):\n        if len(value) < 5:\n            raise serializers.ValidationError(\"Title must be at least 5 characters.\")\n        return value\n```\n\n**ViewSets and Views:**\n\n```python\n# views.py\nfrom rest_framework import viewsets, permissions, status\nfrom rest_framework.decorators import action\nfrom rest_framework.response import Response\nfrom django_filters.rest_framework import DjangoFilterBackend\n\nclass ArticleViewSet(viewsets.ModelViewSet):\n    queryset = Article.objects.all()\n    serializer_class = ArticleSerializer\n    permission_classes = [permissions.IsAuthenticated]\n    filter_backends = [DjangoFilterBackend]\n    filterset_fields = ['category', 'is_published']\n    search_fields = ['title', 'content']\n    ordering_fields = ['created_at', 'title']\n    \n    def perform_create(self, serializer):\n        serializer.save(author=self.request.user)\n    \n    @action(detail=True, methods=['post'])\n    def publish(self, request, pk=None):\n        article = self.get_object()\n        article.is_published = True\n        article.save()\n        return Response({'status': 'article published'})\n    \n    @action(detail=False)\n    def published(self, request):\n        published_articles = Article.objects.filter(is_published=True)\n        serializer = self.get_serializer(published_articles, many=True)\n        return Response(serializer.data)\n```\n\n**URL Configuration:**\n\n```python\n# urls.py\nfrom rest_framework.routers import DefaultRouter\nfrom django.urls import path, include\nfrom . import views\n\nrouter = DefaultRouter()\nrouter.register(r'articles', views.ArticleViewSet)\nrouter.register(r'categories', views.CategoryViewSet)\n\nurlpatterns = [\n    path('api/', include(router.urls)),\n    path('api-auth/', include('rest_framework.urls')),\n]\n```\n\nDRF provides powerful features like automatic API documentation, throttling, versioning, and content negotiation for building robust APIs.",
      "keywords": ["DRF", "REST API", "serializers", "viewsets", "API views", "authentication", "permissions"],
      "difficulty": "medium"
    },
    {
      "id": 10009,
      "tag": "django",
      "question": "Explain Django database migrations and model relationships (ForeignKey, ManyToMany, OneToOne). How do you handle complex migrations?",
      "answer": "Django migrations are version control for your database schema. They automatically generate and apply database changes based on model modifications. Django supports various model relationships for data modeling.\n\n**Model Relationships:**\n\n```python\n# models.py\nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField(unique=True)\n    bio = models.TextField(blank=True)\n    \n    def __str__(self):\n        return self.name\n\nclass Category(models.Model):\n    name = models.CharField(max_length=50)\n    description = models.TextField()\n\nclass Article(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    # ForeignKey (Many-to-One)\n    author = models.ForeignKey(Author, on_delete=models.CASCADE, related_name='articles')\n    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True)\n    # ManyToMany\n    tags = models.ManyToManyField('Tag', blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\nclass Tag(models.Model):\n    name = models.CharField(max_length=30, unique=True)\n\nclass AuthorProfile(models.Model):\n    # OneToOne\n    author = models.OneToOneField(Author, on_delete=models.CASCADE)\n    website = models.URLField(blank=True)\n    social_media = models.JSONField(default=dict)\n    avatar = models.ImageField(upload_to='avatars/', blank=True)\n```\n\n**Basic Migration Commands:**\n\n```bash\n# Create migrations\npython manage.py makemigrations\npython manage.py makemigrations myapp\n\n# Apply migrations  \npython manage.py migrate\npython manage.py migrate myapp\n\n# Show migration status\npython manage.py showmigrations\n\n# Rollback migrations\npython manage.py migrate myapp 0003\n```\n\n**Complex Migration Scenarios:**\n\n```python\n# Custom migration for data transformation\nfrom django.db import migrations\n\ndef combine_names(apps, schema_editor):\n    Author = apps.get_model('myapp', 'Author')\n    for author in Author.objects.all():\n        author.full_name = f\"{author.first_name} {author.last_name}\"\n        author.save()\n\ndef reverse_combine_names(apps, schema_editor):\n    Author = apps.get_model('myapp', 'Author')\n    for author in Author.objects.all():\n        names = author.full_name.split(' ', 1)\n        author.first_name = names[0]\n        author.last_name = names[1] if len(names) > 1 else ''\n        author.save()\n\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('myapp', '0004_add_full_name_field'),\n    ]\n    \n    operations = [\n        migrations.RunPython(combine_names, reverse_combine_names),\n        migrations.RemoveField(\n            model_name='author',\n            name='first_name',\n        ),\n        migrations.RemoveField(\n            model_name='author',\n            name='last_name',\n        ),\n    ]\n```\n\n**Querying Relationships:**\n\n```python\n# Forward relationships\narticle = Article.objects.get(id=1)\nprint(article.author.name)  # ForeignKey\nprint(article.tags.all())   # ManyToMany\n\n# Reverse relationships\nauthor = Author.objects.get(id=1)\nprint(author.articles.all())  # Related articles\n\n# Complex queries with relationships\narticles_with_author = Article.objects.select_related('author', 'category')\narticles_with_tags = Article.objects.prefetch_related('tags')\n```\n\nMigrations ensure database schema consistency across environments and deployments.",
      "keywords": ["migrations", "ForeignKey", "ManyToMany", "OneToOne", "relationships", "database schema"],
      "difficulty": "medium"
    },
    {
      "id": 10010,
      "tag": "django",
      "question": "How does Django handle static files and media files? Explain the difference and configuration for both development and production.",
      "answer": "Django handles static files (CSS, JavaScript, images) and media files (user-uploaded content) differently. Static files are served during development but require separate handling in production.\n\n**Static Files Configuration:**\n\n```python\n# settings.py\nimport os\n\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n    os.path.join(BASE_DIR, 'myapp/static'),\n]\n\nSTATICFILES_FINDERS = [\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n]\n\n# Media files (User uploads)\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n```\n\n**URL Configuration:**\n\n```python\n# urls.py\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    # Your URL patterns\n]\n\n# Serve media files during development\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\n```\n\n**Using Static Files in Templates:**\n\n```html\n{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/style.css' %}\">\n    <script src=\"{% static 'js/main.js' %}\"></script>\n</head>\n<body>\n    <img src=\"{% static 'images/logo.png' %}\" alt=\"Logo\">\n</body>\n</html>\n```\n\n**Production Configuration:**\n\n```python\n# Production settings\nSTATIC_ROOT = '/var/www/mysite/static/'\nMEDIA_ROOT = '/var/www/mysite/media/'\n\n# Use whitenoise for static files\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'whitenoise.middleware.WhiteNoiseMiddleware',\n    # other middleware\n]\n\n# Collect static files\n# python manage.py collectstatic\n```\n\n**File Upload Handling:**\n\n```python\n# models.py\nclass Document(models.Model):\n    title = models.CharField(max_length=200)\n    file = models.FileField(upload_to='documents/%Y/%m/')\n    uploaded_at = models.DateTimeField(auto_now_add=True)\n```\n\nStatic files are application assets, while media files are user-generated content requiring proper security considerations.",
      "keywords": ["static files", "media files", "collectstatic", "STATIC_ROOT", "MEDIA_ROOT", "whitenoise"],
      "difficulty": "easy"
    },
    {
      "id": 10011,
      "tag": "django",
      "question": "What are Django signals and how are they used? Provide examples of common signal use cases.",
      "answer": "Django signals are a dispatcher system that allows decoupled applications to get notified when certain actions occur. They implement the observer pattern and help maintain loose coupling between components.\n\n**Built-in Signals:**\n\n```python\n# Common Django signals\nfrom django.db.models.signals import pre_save, post_save, pre_delete, post_delete\nfrom django.contrib.auth.signals import user_logged_in, user_logged_out\nfrom django.core.signals import request_started, request_finished\nfrom django.dispatch import receiver\n\n# Signal handlers using decorators\n@receiver(post_save, sender=User)\ndef create_user_profile(sender, instance, created, **kwargs):\n    if created:\n        UserProfile.objects.create(user=instance)\n\n@receiver(post_save, sender=User)\ndef save_user_profile(sender, instance, **kwargs):\n    if hasattr(instance, 'userprofile'):\n        instance.userprofile.save()\n\n@receiver(user_logged_in)\ndef log_user_login(sender, request, user, **kwargs):\n    print(f\"User {user.username} logged in from {request.META.get('REMOTE_ADDR')}\")\n```\n\n**Manual Signal Connection:**\n\n```python\n# signals.py\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom django.core.mail import send_mail\nfrom .models import Order\n\ndef send_order_confirmation(sender, instance, created, **kwargs):\n    if created:\n        send_mail(\n            'Order Confirmation',\n            f'Your order #{instance.id} has been received.',\n            'noreply@example.com',\n            [instance.user.email],\n        )\n\n# Connect signal manually\npost_save.connect(send_order_confirmation, sender=Order)\n```\n\n**Custom Signals:**\n\n```python\n# signals.py\nfrom django.dispatch import Signal\n\n# Define custom signal\npayment_completed = Signal()\n\n# Send signal\ndef process_payment(order):\n    # Payment processing logic\n    if payment_successful:\n        payment_completed.send(sender=order.__class__, order=order, amount=order.total)\n\n# Listen to custom signal\n@receiver(payment_completed)\ndef handle_payment_completion(sender, order, amount, **kwargs):\n    # Update inventory\n    # Send confirmation email\n    # Generate invoice\n    pass\n```\n\n**Signal Registration in Apps:**\n\n```python\n# apps.py\nfrom django.apps import AppConfig\n\nclass MyAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'myapp'\n    \n    def ready(self):\n        import myapp.signals  # Import signal handlers\n\n# __init__.py\ndefault_app_config = 'myapp.apps.MyAppConfig'\n```\n\n**Common Use Cases:**\n- Creating related objects automatically\n- Cache invalidation\n- Logging and auditing\n- Sending notifications\n- File cleanup\n- Search index updates\n\n**Best Practices:**\n- Keep signal handlers lightweight\n- Avoid database queries in signals when possible\n- Be careful with signal recursion\n- Use weak references for temporary connections\n\nSignals provide a clean way to decouple components and handle cross-cutting concerns without tight coupling.",
      "keywords": ["signals", "post_save", "pre_save", "receiver", "decoupling", "observer pattern"],
      "difficulty": "easy"
    },
    {
      "id": 10012,
      "tag": "django",
      "question": "How does Django handle sessions and cookies? Explain session configuration and security considerations.",
      "answer": "Django provides a session framework for storing and retrieving arbitrary data on a per-site-visitor basis. Sessions use cookies to store a session key and keep data server-side for security.\n\n**Session Configuration:**\n\n```python\n# settings.py\n# Session engine options\nSESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Database (default)\n# SESSION_ENGINE = 'django.contrib.sessions.backends.cache'  # Cache\n# SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'  # Cache + DB\n# SESSION_ENGINE = 'django.contrib.sessions.backends.file'  # File system\n\n# Session settings\nSESSION_COOKIE_AGE = 1209600  # 2 weeks in seconds\nSESSION_COOKIE_NAME = 'sessionid'\nSESSION_COOKIE_HTTPONLY = True  # JavaScript cannot access\nSESSION_COOKIE_SECURE = True   # HTTPS only (production)\nSESSION_COOKIE_SAMESITE = 'Lax'  # CSRF protection\nSESSION_SAVE_EVERY_REQUEST = False  # Save on every request\nSESSION_EXPIRE_AT_BROWSER_CLOSE = False  # Persist after browser close\n\n# Security settings\nSESSION_COOKIE_DOMAIN = None  # Current domain only\nSESSION_COOKIE_PATH = '/'     # Entire site\n```\n\n**Using Sessions in Views:**\n\n```python\n# views.py\ndef shopping_cart_view(request):\n    # Get session data\n    cart = request.session.get('cart', {})\n    \n    if request.method == 'POST':\n        product_id = request.POST.get('product_id')\n        quantity = int(request.POST.get('quantity', 1))\n        \n        # Update session\n        if product_id in cart:\n            cart[product_id] += quantity\n        else:\n            cart[product_id] = quantity\n            \n        request.session['cart'] = cart\n        request.session.modified = True  # Force save\n    \n    return render(request, 'cart.html', {'cart': cart})\n\ndef user_preferences(request):\n    # Store user preferences\n    if request.method == 'POST':\n        request.session['theme'] = request.POST.get('theme', 'light')\n        request.session['language'] = request.POST.get('language', 'en')\n        request.session.set_expiry(300)  # Expire in 5 minutes\n    \n    preferences = {\n        'theme': request.session.get('theme', 'light'),\n        'language': request.session.get('language', 'en'),\n    }\n    return render(request, 'preferences.html', preferences)\n\ndef clear_session(request):\n    # Clear specific keys\n    if 'cart' in request.session:\n        del request.session['cart']\n    \n    # Clear entire session\n    request.session.flush()  # Deletes session data and session key\n    \n    return redirect('home')\n```\n\n**Session Management:**\n\n```python\n# Session operations\nrequest.session['key'] = 'value'           # Set session data\nvalue = request.session.get('key')         # Get session data\nrequest.session.pop('key', None)          # Remove session key\nrequest.session.clear()                   # Clear session data (keep session)\nrequest.session.flush()                   # Delete session entirely\nrequest.session.cycle_key()               # Change session key (security)\nrequest.session.set_expiry(300)           # Set custom expiry\nrequest.session.set_expiry(0)             # Expire at browser close\n\n# Session info\nrequest.session.session_key               # Session key\nrequest.session.get_expiry_age()          # Seconds until expiry\nrequest.session.get_expiry_date()         # Expiry datetime\n```\n\n**Custom Session Backend:**\n\n```python\n# backends.py\nfrom django.contrib.sessions.backends.base import SessionBase\nimport redis\n\nclass RedisSessionStore(SessionBase):\n    def __init__(self, session_key=None):\n        super().__init__(session_key)\n        self.redis = redis.Redis(host='localhost', port=6379, db=0)\n    \n    def load(self):\n        try:\n            session_data = self.redis.get(self.session_key)\n            return self.decode(session_data) if session_data else {}\n        except:\n            return {}\n    \n    def save(self, must_create=False):\n        session_data = self.encode(self._get_session(no_load=must_create))\n        self.redis.setex(self.session_key, self.get_expiry_age(), session_data)\n```\n\n**Security Best Practices:**\n- Always use HTTPS in production\n- Set HttpOnly cookies to prevent XSS\n- Use SameSite cookies for CSRF protection\n- Regenerate session keys after authentication\n- Set appropriate expiry times\n- Clear sessions on logout\n\nSessions provide secure server-side storage while cookies only store the session identifier.",
      "keywords": ["sessions", "cookies", "session backends", "security", "HttpOnly", "SameSite"],
      "difficulty": "easy"
    },
    {
      "id": 10013,
      "tag": "django",
      "question": "Explain Django settings configuration and environment management. How do you handle different settings for development, staging, and production?",
      "answer": "Django settings configuration is crucial for managing different environments. Best practices involve splitting settings into multiple files and using environment variables for sensitive data.\n\n**Settings Structure:**\n\n```python\n# settings/\n#   __init__.py\n#   base.py        # Common settings\n#   development.py # Development-specific\n#   staging.py     # Staging-specific  \n#   production.py  # Production-specific\n\n# settings/base.py\nimport os\nfrom pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent.parent\n\n# Common settings\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # Local apps\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\n# Database base configuration\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': os.getenv('DB_NAME', 'myproject'),\n        'USER': os.getenv('DB_USER', 'postgres'),\n        'PASSWORD': os.getenv('DB_PASSWORD', ''),\n        'HOST': os.getenv('DB_HOST', 'localhost'),\n        'PORT': os.getenv('DB_PORT', '5432'),\n    }\n}\n\n# Internationalization\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n```\n\n**Development Settings:**\n\n```python\n# settings/development.py\nfrom .base import *\n\nDEBUG = True\nALLOWED_HOSTS = ['localhost', '127.0.0.1']\n\n# Development-specific apps\nINSTALLED_APPS += [\n    'debug_toolbar',\n    'django_extensions',\n]\n\nMIDDLEWARE += [\n    'debug_toolbar.middleware.DebugToolbarMiddleware',\n]\n\n# Development database (SQLite for simplicity)\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Static files\nSTATIC_URL = '/static/'\nSTATIC_ROOT = BASE_DIR / 'staticfiles'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n\n# Email backend for development\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\n\n# Debug toolbar configuration\nINTERNAL_IPS = ['127.0.0.1']\n\n# Logging\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n        },\n    },\n    'root': {\n        'handlers': ['console'],\n        'level': 'INFO',\n    },\n}\n```\n\n**Production Settings:**\n\n```python\n# settings/production.py\nfrom .base import *\nimport sentry_sdk\nfrom sentry_sdk.integrations.django import DjangoIntegration\n\nDEBUG = False\nALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split(',')\n\n# Security settings\nSECURE_SSL_REDIRECT = True\nSECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\nSESSION_COOKIE_SECURE = True\nCSRF_COOKIE_SECURE = True\nSECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nSECURE_HSTS_SECONDS = 31536000\nSECURE_HSTS_INCLUDE_SUBDOMAINS = True\nSECURE_HSTS_PRELOAD = True\n\n# Static files with WhiteNoise\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\nMIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')\n\n# Email configuration\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = os.getenv('EMAIL_HOST')\nEMAIL_PORT = int(os.getenv('EMAIL_PORT', 587))\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')\n\n# Caching\nCACHES = {\n    'default': {\n        'BACKEND': 'django_redis.cache.RedisCache',\n        'LOCATION': os.getenv('REDIS_URL', 'redis://127.0.0.1:6379/1'),\n        'OPTIONS': {\n            'CLIENT_CLASS': 'django_redis.client.DefaultClient',\n        }\n    }\n}\n\n# Sentry error tracking\nsentry_sdk.init(\n    dsn=os.getenv('SENTRY_DSN'),\n    integrations=[DjangoIntegration()],\n    traces_sample_rate=0.1,\n)\n```\n\n**Environment Variables (.env):**\n\n```bash\n# .env\nDJANGO_SETTINGS_MODULE=myproject.settings.development\nSECRET_KEY=your-secret-key-here\nDB_NAME=myproject_dev\nDB_USER=postgres\nDB_PASSWORD=password\nDB_HOST=localhost\nDB_PORT=5432\nEMAIL_HOST_USER=your-email@example.com\nEMAIL_HOST_PASSWORD=your-app-password\nSENTRY_DSN=https://your-sentry-dsn\n```\n\n**Using Environment Variables:**\n\n```python\n# Using python-decouple\nfrom decouple import config, Csv\n\nSECRET_KEY = config('SECRET_KEY')\nDEBUG = config('DEBUG', default=False, cast=bool)\nALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv())\nDATABASE_URL = config('DATABASE_URL')\n```\n\nThis approach provides flexibility, security, and maintainability across different deployment environments.",
      "keywords": ["settings", "environment variables", "configuration", "production", "development", "security"],
      "difficulty": "easy"
    },
    {
      "id": 10014,
      "tag": "django",
      "question": "How do you write tests in Django? Explain unit tests, integration tests, and the Django test client.",
      "answer": "Django provides a comprehensive testing framework built on Python's unittest module. It includes test client for simulating requests, fixtures for test data, and various assertion methods for Django-specific testing.\n\n**Test Structure and Basic Tests:**\n\n```python\n# tests.py\nfrom django.test import TestCase, TransactionTestCase\nfrom django.contrib.auth.models import User\nfrom django.urls import reverse\nfrom django.core.exceptions import ValidationError\nfrom .models import Article, Category\n\nclass ArticleModelTest(TestCase):\n    def setUp(self):\n        self.user = User.objects.create_user(\n            username='testuser',\n            email='test@example.com',\n            password='testpass123'\n        )\n        self.category = Category.objects.create(\n            name='Tech',\n            description='Technology articles'\n        )\n    \n    def test_article_creation(self):\n        article = Article.objects.create(\n            title='Test Article',\n            content='This is test content',\n            author=self.user,\n            category=self.category\n        )\n        self.assertEqual(article.title, 'Test Article')\n        self.assertEqual(article.author, self.user)\n        self.assertTrue(article.created_at)\n    \n    def test_article_string_representation(self):\n        article = Article.objects.create(\n            title='Test Article',\n            content='Content',\n            author=self.user\n        )\n        self.assertEqual(str(article), 'Test Article')\n    \n    def test_article_validation(self):\n        with self.assertRaises(ValidationError):\n            article = Article(title='', content='Content', author=self.user)\n            article.full_clean()\n```\n\n**Django Test Client:**\n\n```python\nclass ArticleViewTest(TestCase):\n    def setUp(self):\n        self.user = User.objects.create_user(\n            username='testuser',\n            password='testpass123'\n        )\n        self.article = Article.objects.create(\n            title='Test Article',\n            content='Test content',\n            author=self.user\n        )\n    \n    def test_article_list_view(self):\n        response = self.client.get(reverse('article_list'))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, 'Test Article')\n        self.assertQuerysetEqual(\n            response.context['articles'],\n            [self.article]\n        )\n    \n    def test_article_detail_view(self):\n        response = self.client.get(\n            reverse('article_detail', args=[self.article.id])\n        )\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(response.context['article'], self.article)\n    \n    def test_article_create_requires_login(self):\n        response = self.client.get(reverse('article_create'))\n        self.assertEqual(response.status_code, 302)  # Redirect to login\n    \n    def test_article_create_authenticated(self):\n        self.client.login(username='testuser', password='testpass123')\n        response = self.client.post(reverse('article_create'), {\n            'title': 'New Article',\n            'content': 'New content',\n            'category': self.category.id\n        })\n        self.assertEqual(response.status_code, 302)\n        self.assertTrue(Article.objects.filter(title='New Article').exists())\n```\n\n**Form Testing:**\n\n```python\nfrom .forms import ArticleForm\n\nclass ArticleFormTest(TestCase):\n    def setUp(self):\n        self.user = User.objects.create_user(username='testuser')\n        self.category = Category.objects.create(name='Tech')\n    \n    def test_article_form_valid_data(self):\n        form = ArticleForm(data={\n            'title': 'Test Article',\n            'content': 'Test content',\n            'category': self.category.id\n        })\n        self.assertTrue(form.is_valid())\n    \n    def test_article_form_no_data(self):\n        form = ArticleForm(data={})\n        self.assertFalse(form.is_valid())\n        self.assertIn('title', form.errors)\n        self.assertIn('content', form.errors)\n    \n    def test_article_form_save(self):\n        form = ArticleForm(data={\n            'title': 'Test Article',\n            'content': 'Test content',\n            'category': self.category.id\n        })\n        if form.is_valid():\n            article = form.save(commit=False)\n            article.author = self.user\n            article.save()\n            self.assertEqual(article.title, 'Test Article')\n```\n\n**API Testing with DRF:**\n\n```python\nfrom rest_framework.test import APITestCase\nfrom rest_framework import status\nfrom django.contrib.auth.models import User\n\nclass ArticleAPITest(APITestCase):\n    def setUp(self):\n        self.user = User.objects.create_user(\n            username='testuser',\n            password='testpass123'\n        )\n        self.article = Article.objects.create(\n            title='Test Article',\n            content='Test content',\n            author=self.user\n        )\n    \n    def test_get_article_list(self):\n        response = self.client.get('/api/articles/')\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(len(response.data['results']), 1)\n    \n    def test_create_article_authenticated(self):\n        self.client.force_authenticate(user=self.user)\n        data = {\n            'title': 'New Article',\n            'content': 'New content'\n        }\n        response = self.client.post('/api/articles/', data)\n        self.assertEqual(response.status_code, status.HTTP_201_CREATED)\n        self.assertEqual(Article.objects.count(), 2)\n    \n    def test_create_article_unauthenticated(self):\n        data = {'title': 'New Article', 'content': 'New content'}\n        response = self.client.post('/api/articles/', data)\n        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)\n```\n\n**Test Data and Fixtures:**\n\n```python\n# Using fixtures (JSON files)\nclass ArticleTestWithFixtures(TestCase):\n    fixtures = ['users.json', 'articles.json']\n    \n    def test_fixture_data_loaded(self):\n        self.assertEqual(User.objects.count(), 2)\n        self.assertEqual(Article.objects.count(), 5)\n\n# Using factory_boy for test data\nfrom factory import django, Faker\n\nclass UserFactory(django.DjangoModelFactory):\n    class Meta:\n        model = User\n    \n    username = Faker('user_name')\n    email = Faker('email')\n    first_name = Faker('first_name')\n    last_name = Faker('last_name')\n\nclass ArticleFactory(django.DjangoModelFactory):\n    class Meta:\n        model = Article\n    \n    title = Faker('sentence')\n    content = Faker('text')\n    author = django.SubFactory(UserFactory)\n```\n\n**Running Tests:**\n\n```bash\n# Run all tests\npython manage.py test\n\n# Run specific app tests\npython manage.py test myapp\n\n# Run specific test class\npython manage.py test myapp.tests.ArticleModelTest\n\n# Run with coverage\ncoverage run --source='.' manage.py test\ncoverage report\ncoverage html\n```\n\nDjango's testing framework provides tools for comprehensive testing including database transactions, email testing, and cache testing.",
      "keywords": ["testing", "TestCase", "test client", "unit tests", "fixtures", "mocking"],
      "difficulty": "easy"
    },
    {
      "id": 10015,
      "tag": "django",
      "question": "Explain Django's cache framework and different caching strategies. How do you implement caching for views and templates?",
      "answer": "Django's cache framework provides various caching strategies to improve application performance. It supports multiple cache backends and offers per-site, per-view, and template fragment caching.\n\n**Cache Backend Configuration:**\n\n```python\n# settings.py\nCACHES = {\n    'default': {\n        'BACKEND': 'django_redis.cache.RedisCache',\n        'LOCATION': 'redis://127.0.0.1:6379/1',\n        'OPTIONS': {\n            'CLIENT_CLASS': 'django_redis.client.DefaultClient',\n        },\n        'KEY_PREFIX': 'myapp',\n        'TIMEOUT': 300,  # 5 minutes default\n    },\n    'sessions': {\n        'BACKEND': 'django_redis.cache.RedisCache',\n        'LOCATION': 'redis://127.0.0.1:6379/2',\n    },\n    # Alternative backends\n    'memcached': {\n        'BACKEND': 'django.core.cache.backends.memcached.PyMemcacheCache',\n        'LOCATION': '127.0.0.1:11211',\n    },\n    'database': {\n        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',\n        'LOCATION': 'cache_table',\n    },\n    'filesystem': {\n        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',\n        'LOCATION': '/var/tmp/django_cache',\n    }\n}\n\n# Session cache backend\nSESSION_ENGINE = 'django.contrib.sessions.backends.cache'\nSESSION_CACHE_ALIAS = 'sessions'\n```\n\n**Low-Level Cache API:**\n\n```python\n# Using cache directly\nfrom django.core.cache import cache, caches\nfrom django.core.cache.utils import make_template_fragment_key\n\n# Basic cache operations\ndef get_expensive_data(user_id):\n    cache_key = f'user_data_{user_id}'\n    data = cache.get(cache_key)\n    \n    if data is None:\n        # Expensive operation\n        data = expensive_database_query(user_id)\n        cache.set(cache_key, data, timeout=600)  # Cache for 10 minutes\n    \n    return data\n\n# Using specific cache backend\ndef cached_function():\n    redis_cache = caches['default']\n    db_cache = caches['database']\n    \n    # Cache with different timeouts\n    cache.set('key1', 'value1', 30)  # 30 seconds\n    cache.set('key2', 'value2', None)  # Never expires\n    \n    # Atomic operations\n    cache.set_many({\n        'key1': 'value1',\n        'key2': 'value2',\n    }, timeout=300)\n    \n    values = cache.get_many(['key1', 'key2'])\n    cache.delete_many(['key1', 'key2'])\n    \n    # Versioning\n    cache.set('key', 'value', version=1)\n    cache.get('key', version=1)\n```\n\n**View-Level Caching:**\n\n```python\n# Per-view caching\nfrom django.views.decorators.cache import cache_page\nfrom django.views.decorators.vary import vary_on_headers\nfrom django.utils.decorators import method_decorator\n\n@cache_page(60 * 15)  # Cache for 15 minutes\ndef article_list(request):\n    articles = Article.objects.all()\n    return render(request, 'articles/list.html', {'articles': articles})\n\n@cache_page(60 * 15)\n@vary_on_headers('User-Agent', 'Accept-Language')\ndef article_detail(request, article_id):\n    article = get_object_or_404(Article, id=article_id)\n    return render(request, 'articles/detail.html', {'article': article})\n\n# Class-based view caching\n@method_decorator(cache_page(60 * 15), name='dispatch')\nclass ArticleListView(ListView):\n    model = Article\n    template_name = 'articles/list.html'\n\n# Conditional caching\nfrom django.views.decorators.cache import cache_control\n\n@cache_control(max_age=3600, must_revalidate=True)\ndef public_view(request):\n    return render(request, 'public.html')\n\n@cache_control(private=True, max_age=300)\ndef private_view(request):\n    return render(request, 'private.html')\n```\n\n**Template Fragment Caching:**\n\n```html\n<!-- Template fragment caching -->\n{% load cache %}\n\n{% cache 500 article_list %}\n    <div class=\"article-list\">\n        {% for article in articles %}\n            <h3>{{ article.title }}</h3>\n            <p>{{ article.excerpt }}</p>\n        {% endfor %}\n    </div>\n{% endcache %}\n\n<!-- Cache with variables -->\n{% cache 300 article_detail article.id article.modified %}\n    <article>\n        <h1>{{ article.title }}</h1>\n        <div class=\"content\">{{ article.content|safe }}</div>\n    </article>\n{% endcache %}\n\n<!-- Conditional fragment caching -->\n{% cache 600 user_sidebar request.user.username %}\n    {% if request.user.is_authenticated %}\n        <div class=\"user-info\">\n            <p>Welcome, {{ request.user.first_name }}!</p>\n            <!-- Expensive user-specific content -->\n        </div>\n    {% endif %}\n{% endcache %}\n```\n\n**Site-Wide Caching Middleware:**\n\n```python\n# settings.py\nMIDDLEWARE = [\n    'django.middleware.cache.UpdateCacheMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    # ... other middleware ...\n    'django.middleware.cache.FetchFromCacheMiddleware',\n]\n\nCACHE_MIDDLEWARE_ALIAS = 'default'\nCACHE_MIDDLEWARE_SECONDS = 600\nCACHE_MIDDLEWARE_KEY_PREFIX = 'mysite'\n```\n\n**Custom Cache Strategies:**\n\n```python\n# Cache invalidation\nfrom django.db.models.signals import post_save, post_delete\nfrom django.dispatch import receiver\n\n@receiver(post_save, sender=Article)\n@receiver(post_delete, sender=Article)\ndef invalidate_article_cache(sender, **kwargs):\n    cache.delete('article_list')\n    cache.delete_many([\n        f'article_{kwargs[\"instance\"].id}',\n        'featured_articles',\n        'recent_articles',\n    ])\n\n# Cache warming\ndef warm_cache():\n    \"\"\"Pre-populate cache with frequently accessed data\"\"\"\n    articles = Article.objects.select_related('author').all()\n    cache.set('all_articles', articles, timeout=3600)\n    \n    for article in articles:\n        cache.set(f'article_{article.id}', article, timeout=3600)\n\n# Cache with fallback\ndef get_cached_or_compute(cache_key, compute_func, timeout=300):\n    result = cache.get(cache_key)\n    if result is None:\n        result = compute_func()\n        cache.set(cache_key, result, timeout)\n    return result\n```\n\nDjango's caching framework provides flexible options for improving performance at different levels of your application.",
      "keywords": ["caching", "cache backends", "Redis", "cache_page", "template fragments", "performance"],
      "difficulty": "easy"
    },
    {
      "id": 10016,
      "tag": "django",
      "question": "What are Django's built-in security features and best practices? Explain CSRF protection, XSS prevention, and SQL injection protection.",
      "answer": "Django provides comprehensive security features to protect against common web vulnerabilities. It includes built-in protections for CSRF, XSS, SQL injection, and other security threats.\n\n**CSRF (Cross-Site Request Forgery) Protection:**\n\n```python\n# CSRF middleware (enabled by default)\n# settings.py\nMIDDLEWARE = [\n    # ...\n    'django.middleware.csrf.CsrfViewMiddleware',\n    # ...\n]\n\n# CSRF settings\nCSRF_COOKIE_NAME = 'csrftoken'\nCSRF_COOKIE_HTTPONLY = False  # Allow JavaScript access for AJAX\nCSRF_COOKIE_SECURE = True     # HTTPS only in production\nCSRF_COOKIE_SAMESITE = 'Lax'  # Cross-site protection\nCSRF_TRUSTED_ORIGINS = ['https://example.com']\n\n# Views with CSRF protection\nfrom django.views.decorators.csrf import csrf_protect, csrf_exempt\nfrom django.middleware.csrf import get_token\n\n@csrf_protect\ndef my_view(request):\n    # CSRF protection enforced\n    pass\n\n@csrf_exempt  # Use sparingly and carefully\ndef api_view(request):\n    # CSRF protection disabled (for APIs with token auth)\n    pass\n\n# AJAX CSRF handling\ndef get_csrf_token(request):\n    return JsonResponse({'csrfToken': get_token(request)})\n```\n\n**Template CSRF Usage:**\n\n```html\n<!-- Forms with CSRF token -->\n<form method=\"post\">\n    {% csrf_token %}\n    <input type=\"text\" name=\"username\">\n    <button type=\"submit\">Submit</button>\n</form>\n\n<!-- AJAX with CSRF -->\n<script>\nfunction getCookie(name) {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\nconst csrftoken = getCookie('csrftoken');\n\nfetch('/api/data/', {\n    method: 'POST',\n    headers: {\n        'X-CSRFToken': csrftoken,\n        'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data)\n});\n</script>\n```\n\n**XSS (Cross-Site Scripting) Prevention:**\n\n```python\n# Django templates automatically escape variables\n# views.py\ndef user_content_view(request):\n    user_input = request.GET.get('message', '')\n    # This will be automatically escaped in templates\n    return render(request, 'content.html', {'message': user_input})\n```\n\n```html\n<!-- Automatic escaping -->\n<p>{{ message }}</p>  <!-- Automatically escaped -->\n\n<!-- Manual escaping control -->\n{% load static %}\n<p>{{ message|escape }}</p>          <!-- Force escape -->\n<p>{{ trusted_content|safe }}</p>    <!-- Disable escaping -->\n<p>{% autoescape off %}{{ content }}{% endautoescape %}</p>\n\n<!-- Safe HTML rendering -->\n{% load markup %}\n<div>{{ user_content|markdown|safe }}</div>\n```\n\n**SQL Injection Protection:**\n\n```python\n# Django ORM automatically protects against SQL injection\nfrom django.db import models\n\n# Safe ORM queries\ndef safe_queries(request):\n    user_id = request.GET.get('user_id')\n    \n    # Safe - parameterized queries\n    user = User.objects.get(id=user_id)\n    articles = Article.objects.filter(title__icontains=search_term)\n    \n    # Safe raw SQL with parameters\n    from django.db import connection\n    with connection.cursor() as cursor:\n        cursor.execute(\n            \"SELECT * FROM users WHERE id = %s AND status = %s\",\n            [user_id, 'active']\n        )\n        results = cursor.fetchall()\n    \n    # Dangerous - never do this\n    # cursor.execute(f\"SELECT * FROM users WHERE id = {user_id}\")  # VULNERABLE\n```\n\n**Security Headers and Settings:**\n\n```python\n# settings.py - Security settings\nSECURE_BROWSER_XSS_FILTER = True\nSECURE_CONTENT_TYPE_NOSNIFF = True\nSECURE_HSTS_SECONDS = 31536000  # 1 year\nSECURE_HSTS_INCLUDE_SUBDOMAINS = True\nSECURE_HSTS_PRELOAD = True\nSECURE_SSL_REDIRECT = True\nSECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\n\n# Clickjacking protection\nX_FRAME_OPTIONS = 'DENY'  # or 'SAMEORIGIN'\n\n# Content Security Policy\nCSP_DEFAULT_SRC = [\"'self'\"]\nCSP_SCRIPT_SRC = [\"'self'\", \"'unsafe-inline'\"]\nCSP_STYLE_SRC = [\"'self'\", \"'unsafe-inline'\"]\n\n# Session security\nSESSION_COOKIE_SECURE = True\nSESSION_COOKIE_HTTPONLY = True\nSESSION_COOKIE_SAMESITE = 'Lax'\nSESSION_EXPIRE_AT_BROWSER_CLOSE = True\n\n# Secure referrer policy\nSECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'\n```\n\n**Authentication and Authorization Security:**\n\n```python\n# Password validation\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n        'OPTIONS': {\n            'min_length': 12,\n        }\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Custom security middleware\nclass SecurityHeadersMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        response = self.get_response(request)\n        \n        # Add security headers\n        response['X-Content-Type-Options'] = 'nosniff'\n        response['X-Frame-Options'] = 'DENY'\n        response['X-XSS-Protection'] = '1; mode=block'\n        response['Referrer-Policy'] = 'strict-origin-when-cross-origin'\n        \n        return response\n\n# Rate limiting\nfrom django.contrib.auth.decorators import login_required\nfrom django.views.decorators.cache import cache_page\nfrom django_ratelimit.decorators import ratelimit\n\n@ratelimit(key='ip', rate='5/m', method='POST')\ndef login_view(request):\n    # Limited to 5 attempts per minute per IP\n    pass\n```\n\n**File Upload Security:**\n\n```python\n# Secure file uploads\nfrom django.core.exceptions import ValidationError\nimport magic\n\ndef validate_file_type(file):\n    allowed_types = ['image/jpeg', 'image/png', 'application/pdf']\n    file_type = magic.from_buffer(file.read(), mime=True)\n    file.seek(0)  # Reset file pointer\n    \n    if file_type not in allowed_types:\n        raise ValidationError('File type not allowed')\n\nclass Document(models.Model):\n    file = models.FileField(\n        upload_to='documents/%Y/%m/',\n        validators=[validate_file_type]\n    )\n    \n    def save(self, *args, **kwargs):\n        # Additional security checks\n        if self.file.size > 10 * 1024 * 1024:  # 10MB limit\n            raise ValidationError('File too large')\n        super().save(*args, **kwargs)\n```\n\n**Security Best Practices:**\n- Always use HTTPS in production\n- Keep Django and dependencies updated\n- Use environment variables for secrets\n- Implement proper logging and monitoring\n- Regular security audits with tools like `django-security`\n- Use Content Security Policy (CSP)\n- Validate and sanitize all user input\n- Implement proper error handling without information disclosure\n\nDjango's security features provide a solid foundation, but proper configuration and following best practices are essential for secure applications.",
      "keywords": ["security", "CSRF", "XSS", "SQL injection", "security headers", "authentication", "validation"],
      "difficulty": "medium"
    },
    {
      "id": 10017,
      "tag": "django",
      "question": "How do you integrate Celery with Django for background tasks? Explain task queues, scheduling, and monitoring.",
      "answer": "Celery is a distributed task queue that integrates seamlessly with Django for handling background tasks, periodic tasks, and asynchronous processing. It's essential for tasks like sending emails, processing files, or making external API calls.\n\n**Celery Installation and Configuration:**\n\n```python\n# Install dependencies\n# pip install celery redis django-celery-beat django-celery-results\n\n# settings.py\nimport os\nfrom celery import Celery\n\n# Celery Configuration\nCELERY_BROKER_URL = 'redis://localhost:6379/0'\nCELERY_RESULT_BACKEND = 'redis://localhost:6379/0'\n\n# Alternative brokers\n# CELERY_BROKER_URL = 'amqp://guest@localhost//'\n# CELERY_RESULT_BACKEND = 'django-db'  # Use Django database\n\nCELERY_ACCEPT_CONTENT = ['json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = 'UTC'\n\n# Task routing\nCELERY_TASK_ROUTES = {\n    'myapp.tasks.send_email': {'queue': 'emails'},\n    'myapp.tasks.process_image': {'queue': 'images'},\n    'myapp.tasks.heavy_computation': {'queue': 'compute'},\n}\n\n# Task execution settings\nCELERY_TASK_SOFT_TIME_LIMIT = 300  # 5 minutes\nCELERY_TASK_TIME_LIMIT = 600       # 10 minutes\nCELERY_TASK_MAX_RETRIES = 3\nCELERY_TASK_DEFAULT_RETRY_DELAY = 60\n\n# Beat scheduler for periodic tasks\nCELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'\n\n# Django-celery-results for storing results in Django DB\nINSTALLED_APPS += [\n    'django_celery_beat',\n    'django_celery_results',\n]\n\nCELERY_RESULT_BACKEND = 'django-db'\nCELERY_RESULT_EXTENDED = True\n```\n\n**Celery App Setup:**\n\n```python\n# celery.py (in project root)\nfrom celery import Celery\nimport os\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napp = Celery('myproject')\napp.config_from_object('django.conf:settings', namespace='CELERY')\n\n# Auto-discover tasks from all installed apps\napp.autodiscover_tasks()\n\n@app.task(bind=True)\ndef debug_task(self):\n    print(f'Request: {self.request!r}')\n\n# __init__.py (in project root)\nfrom .celery import app as celery_app\n\n__all__ = ('celery_app',)\n```\n\n**Defining and Using Tasks:**\n\n```python\n# tasks.py\nfrom celery import shared_task\nfrom django.core.mail import send_mail\nfrom django.contrib.auth.models import User\nfrom .models import Article, ProcessingResult\nimport requests\nimport time\n\n@shared_task\ndef send_welcome_email(user_id):\n    \"\"\"Send welcome email to new user\"\"\"\n    try:\n        user = User.objects.get(id=user_id)\n        send_mail(\n            'Welcome to Our Site',\n            f'Hello {user.first_name}, welcome to our platform!',\n            'noreply@example.com',\n            [user.email],\n            fail_silently=False,\n        )\n        return f'Email sent to {user.email}'\n    except User.DoesNotExist:\n        return f'User {user_id} not found'\n\n@shared_task(bind=True, max_retries=3)\ndef process_article_content(self, article_id):\n    \"\"\"Process article content with retry logic\"\"\"\n    try:\n        article = Article.objects.get(id=article_id)\n        \n        # Simulate processing\n        processed_content = expensive_processing(article.content)\n        \n        article.processed_content = processed_content\n        article.is_processed = True\n        article.save()\n        \n        return f'Article {article_id} processed successfully'\n        \n    except Exception as exc:\n        if self.request.retries < self.max_retries:\n            # Exponential backoff\n            countdown = 2 ** self.request.retries\n            raise self.retry(exc=exc, countdown=countdown)\n        raise\n\n@shared_task\ndef fetch_external_data(url):\n    \"\"\"Fetch data from external API\"\"\"\n    try:\n        response = requests.get(url, timeout=30)\n        response.raise_for_status()\n        \n        # Store result\n        result = ProcessingResult.objects.create(\n            url=url,\n            data=response.json(),\n            status='success'\n        )\n        \n        return result.id\n        \n    except requests.RequestException as e:\n        ProcessingResult.objects.create(\n            url=url,\n            error_message=str(e),\n            status='failed'\n        )\n        raise\n\n@shared_task\ndef batch_email_send(user_ids, subject, message):\n    \"\"\"Send emails to multiple users\"\"\"\n    sent_count = 0\n    failed_users = []\n    \n    for user_id in user_ids:\n        try:\n            user = User.objects.get(id=user_id)\n            send_mail(subject, message, 'noreply@example.com', [user.email])\n            sent_count += 1\n        except Exception as e:\n            failed_users.append({'user_id': user_id, 'error': str(e)})\n    \n    return {\n        'sent_count': sent_count,\n        'failed_users': failed_users,\n        'total_attempted': len(user_ids)\n    }\n```\n\n**Using Tasks in Views:**\n\n```python\n# views.py\nfrom django.shortcuts import render, redirect\nfrom django.contrib import messages\nfrom .tasks import send_welcome_email, process_article_content, fetch_external_data\nfrom celery.result import AsyncResult\n\ndef register_user(request):\n    if request.method == 'POST':\n        # Create user logic here\n        user = User.objects.create_user(...)\n        \n        # Send welcome email asynchronously\n        send_welcome_email.delay(user.id)\n        \n        messages.success(request, 'Registration successful! Welcome email sent.')\n        return redirect('dashboard')\n    \n    return render(request, 'register.html')\n\ndef process_article(request, article_id):\n    # Start background processing\n    task = process_article_content.delay(article_id)\n    \n    # Store task ID for tracking\n    request.session['processing_task_id'] = task.id\n    \n    return JsonResponse({\n        'task_id': task.id,\n        'status': 'started',\n        'message': 'Article processing started'\n    })\n\ndef check_task_status(request, task_id):\n    \"\"\"Check the status of a Celery task\"\"\"\n    result = AsyncResult(task_id)\n    \n    if result.ready():\n        if result.successful():\n            return JsonResponse({\n                'status': 'completed',\n                'result': result.result\n            })\n        else:\n            return JsonResponse({\n                'status': 'failed',\n                'error': str(result.result)\n            })\n    else:\n        return JsonResponse({\n            'status': 'pending',\n            'current': result.info\n        })\n```\n\n**Periodic Tasks with Celery Beat:**\n\n```python\n# tasks.py\nfrom celery.schedules import crontab\nfrom django.utils import timezone\nfrom datetime import timedelta\n\n@shared_task\ndef cleanup_old_sessions():\n    \"\"\"Clean up expired sessions\"\"\"\n    from django.contrib.sessions.models import Session\n    Session.objects.filter(expire_date__lt=timezone.now()).delete()\n    return 'Old sessions cleaned up'\n\n@shared_task\ndef generate_daily_report():\n    \"\"\"Generate daily analytics report\"\"\"\n    today = timezone.now().date()\n    # Generate report logic\n    return f'Daily report generated for {today}'\n\n@shared_task\ndef send_reminder_emails():\n    \"\"\"Send reminder emails to inactive users\"\"\"\n    cutoff_date = timezone.now() - timedelta(days=7)\n    inactive_users = User.objects.filter(\n        last_login__lt=cutoff_date,\n        is_active=True\n    )\n    \n    for user in inactive_users:\n        send_mail(\n            'We miss you!',\n            'Come back and check out our new features.',\n            'noreply@example.com',\n            [user.email]\n        )\n    \n    return f'Reminder emails sent to {inactive_users.count()} users'\n\n# Schedule periodic tasks (in settings.py or use Django admin)\nfrom celery.schedules import crontab\n\nCELERY_BEAT_SCHEDULE = {\n    'cleanup-sessions': {\n        'task': 'myapp.tasks.cleanup_old_sessions',\n        'schedule': crontab(hour=2, minute=0),  # Daily at 2 AM\n    },\n    'daily-report': {\n        'task': 'myapp.tasks.generate_daily_report',\n        'schedule': crontab(hour=8, minute=0),  # Daily at 8 AM\n    },\n    'reminder-emails': {\n        'task': 'myapp.tasks.send_reminder_emails',\n        'schedule': crontab(day_of_week=1, hour=10, minute=0),  # Monday at 10 AM\n    },\n    'frequent-task': {\n        'task': 'myapp.tasks.frequent_check',\n        'schedule': 30.0,  # Every 30 seconds\n    },\n}\n```\n\n**Running Celery:**\n\n```bash\n# Start Celery worker\ncelery -A myproject worker --loglevel=info\n\n# Start multiple workers with different queues\ncelery -A myproject worker --loglevel=info --queues=emails,images\ncelery -A myproject worker --loglevel=info --queues=compute --concurrency=2\n\n# Start Celery Beat (scheduler)\ncelery -A myproject beat --loglevel=info\n\n# Combined worker and beat\ncelery -A myproject worker --beat --loglevel=info\n\n# Flower monitoring (install: pip install flower)\ncelery -A myproject flower\n```\n\n**Monitoring and Management:**\n\n```python\n# Management command for task monitoring\n# management/commands/celery_status.py\nfrom django.core.management.base import BaseCommand\nfrom celery import current_app\n\nclass Command(BaseCommand):\n    def handle(self, *args, **options):\n        i = current_app.control.inspect()\n        \n        # Active tasks\n        active = i.active()\n        if active:\n            self.stdout.write('Active tasks:')\n            for worker, tasks in active.items():\n                self.stdout.write(f'  {worker}: {len(tasks)} tasks')\n        \n        # Scheduled tasks\n        scheduled = i.scheduled()\n        if scheduled:\n            self.stdout.write('Scheduled tasks:')\n            for worker, tasks in scheduled.items():\n                self.stdout.write(f'  {worker}: {len(tasks)} tasks')\n```\n\nCelery provides robust asynchronous task processing, making Django applications more responsive and scalable by offloading time-consuming operations to background workers.",
      "keywords": ["Celery", "background tasks", "task queues", "async processing", "Redis", "periodic tasks", "monitoring"],
      "difficulty": "medium"
    },
    {
      "id": 10018,
      "tag": "django",
      "question": "What are Django performance optimization techniques? Explain database optimization, query optimization, and caching strategies for production applications.",
      "answer": "Django performance optimization involves multiple strategies across database queries, caching, static file handling, and application architecture. Proper optimization is crucial for production applications handling high traffic.\n\n**Database Query Optimization:**\n\n```python\n# models.py\nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    \n    class Meta:\n        indexes = [\n            models.Index(fields=['name']),\n            models.Index(fields=['email']),\n        ]\n\nclass Article(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    author = models.ForeignKey(Author, on_delete=models.CASCADE)\n    category = models.ForeignKey('Category', on_delete=models.SET_NULL, null=True)\n    tags = models.ManyToManyField('Tag')\n    created_at = models.DateTimeField(auto_now_add=True)\n    view_count = models.PositiveIntegerField(default=0)\n    \n    class Meta:\n        indexes = [\n            models.Index(fields=['created_at']),\n            models.Index(fields=['author', 'created_at']),\n            models.Index(fields=['category', '-created_at']),\n        ]\n\n# Optimized queries\nclass ArticleViewSet(viewsets.ModelViewSet):\n    def get_queryset(self):\n        # Bad: N+1 query problem\n        # return Article.objects.all()\n        \n        # Good: Use select_related for ForeignKey\n        return Article.objects.select_related('author', 'category')\n    \n    def list(self, request):\n        # Prefetch ManyToMany relationships\n        queryset = self.get_queryset().prefetch_related('tags')\n        \n        # Use only() to fetch specific fields\n        if request.query_params.get('minimal'):\n            queryset = queryset.only('id', 'title', 'created_at')\n        \n        # Use defer() to exclude heavy fields\n        if not request.query_params.get('full_content'):\n            queryset = queryset.defer('content')\n        \n        serializer = self.get_serializer(queryset, many=True)\n        return Response(serializer.data)\n\n# Advanced query optimization\ndef optimized_article_stats():\n    from django.db.models import Count, Avg, Sum, F, Q\n    \n    # Aggregate queries\n    stats = Article.objects.aggregate(\n        total_articles=Count('id'),\n        avg_views=Avg('view_count'),\n        total_views=Sum('view_count')\n    )\n    \n    # Annotate with related counts\n    authors_with_counts = Author.objects.annotate(\n        article_count=Count('article'),\n        total_views=Sum('article__view_count')\n    ).filter(article_count__gt=0)\n    \n    # Complex filtering with Q objects\n    popular_articles = Article.objects.filter(\n        Q(view_count__gt=1000) | Q(tags__name='featured')\n    ).distinct()\n    \n    # F expressions for database-level operations\n    Article.objects.filter(id=article_id).update(\n        view_count=F('view_count') + 1\n    )\n    \n    return stats\n\n# Bulk operations for performance\ndef bulk_operations():\n    # Bulk create\n    articles = [\n        Article(title=f'Article {i}', content=f'Content {i}')\n        for i in range(1000)\n    ]\n    Article.objects.bulk_create(articles, batch_size=100)\n    \n    # Bulk update\n    Article.objects.filter(view_count__lt=10).update(\n        view_count=F('view_count') * 2\n    )\n    \n    # Bulk delete\n    Article.objects.filter(created_at__lt=timezone.now() - timedelta(days=365)).delete()\n```\n\n**Advanced Caching Strategies:**\n\n```python\n# Multi-level caching\nfrom django.core.cache import cache\nfrom django.core.cache.utils import make_template_fragment_key\n\nclass CachedArticleService:\n    def __init__(self):\n        self.cache_timeout = 3600  # 1 hour\n    \n    def get_article(self, article_id):\n        cache_key = f'article:{article_id}'\n        article = cache.get(cache_key)\n        \n        if article is None:\n            article = Article.objects.select_related('author', 'category').get(id=article_id)\n            cache.set(cache_key, article, self.cache_timeout)\n        \n        return article\n    \n    def get_popular_articles(self, limit=10):\n        cache_key = f'popular_articles:{limit}'\n        articles = cache.get(cache_key)\n        \n        if articles is None:\n            articles = list(\n                Article.objects\n                .select_related('author')\n                .order_by('-view_count')[:limit]\n            )\n            cache.set(cache_key, articles, self.cache_timeout)\n        \n        return articles\n    \n    def invalidate_article_cache(self, article_id):\n        cache_keys = [\n            f'article:{article_id}',\n            'popular_articles:10',\n            'popular_articles:20',\n            'recent_articles',\n        ]\n        cache.delete_many(cache_keys)\n\n# Database query result caching\nfrom django.core.cache.backends.base import DEFAULT_TIMEOUT\n\ndef cached_expensive_query(cache_key, query_func, timeout=DEFAULT_TIMEOUT):\n    result = cache.get(cache_key)\n    if result is None:\n        result = query_func()\n        cache.set(cache_key, result, timeout)\n    return result\n\n# Usage\ndef get_article_statistics():\n    return cached_expensive_query(\n        'article_statistics',\n        lambda: Article.objects.aggregate(\n            total=Count('id'),\n            avg_views=Avg('view_count'),\n            top_author=Count('author__name')\n        ),\n        timeout=3600\n    )\n```\n\n**Database Connection and Query Optimization:**\n\n```python\n# settings.py - Database optimization\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': 'mydb',\n        'USER': 'myuser',\n        'PASSWORD': 'mypass',\n        'HOST': 'localhost',\n        'PORT': '5432',\n        'OPTIONS': {\n            'MAX_CONNS': 20,\n            'OPTIONS': {\n                'MAX_CONNS': 20,\n                'statement_timeout': 30000,  # 30 seconds\n            },\n        },\n        'CONN_MAX_AGE': 600,  # Connection pooling\n    }\n}\n\n# Read/Write database splitting\nDATABASE_ROUTERS = ['myapp.routers.DatabaseRouter']\n\nDATABASES['replica'] = {\n    'ENGINE': 'django.db.backends.postgresql',\n    'NAME': 'mydb_replica',\n    # ... replica database settings\n}\n\n# routers.py\nclass DatabaseRouter:\n    def db_for_read(self, model, **hints):\n        \"\"\"Reading from the replica database\"\"\"\n        return 'replica'\n\n    def db_for_write(self, model, **hints):\n        \"\"\"Writing to the primary database\"\"\"\n        return 'default'\n\n    def allow_migrate(self, db, app_label, model_name=None, **hints):\n        return db == 'default'\n```\n\n**Static File and Media Optimization:**\n\n```python\n# settings.py - Static file optimization\nSTATICFILES_FINDERS = [\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n    'compressor.finders.CompressorFinder',  # django-compressor\n]\n\n# Compression and minification\nINSTALLED_APPS += ['compressor']\nCOMPRESS_ENABLED = True\nCOMPRESS_CSS_FILTERS = [\n    'compressor.filters.css_default.CssAbsoluteFilter',\n    'compressor.filters.cssmin.rCSSMinFilter',\n]\nCOMPRESS_JS_FILTERS = [\n    'compressor.filters.jsmin.JSMinFilter',\n]\n\n# CDN integration\nif not DEBUG:\n    AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')\n    AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')\n    AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')\n    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'\n    \n    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'\n    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3StaticStorage'\n    \n    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/static/'\n    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'\n```\n\n**Application-Level Optimization:**\n\n```python\n# Lazy loading and pagination\nfrom django.core.paginator import Paginator\nfrom django.http import JsonResponse\n\nclass OptimizedArticleListView(View):\n    def get(self, request):\n        queryset = Article.objects.select_related('author').defer('content')\n        \n        # Implement search efficiently\n        search_query = request.GET.get('search')\n        if search_query:\n            queryset = queryset.filter(\n                Q(title__icontains=search_query) |\n                Q(author__name__icontains=search_query)\n            )\n        \n        # Pagination to limit memory usage\n        paginator = Paginator(queryset, 25)\n        page_number = request.GET.get('page', 1)\n        page_obj = paginator.get_page(page_number)\n        \n        # Serialize efficiently\n        articles_data = [\n            {\n                'id': article.id,\n                'title': article.title,\n                'author': article.author.name,\n                'created_at': article.created_at.isoformat(),\n            }\n            for article in page_obj\n        ]\n        \n        return JsonResponse({\n            'articles': articles_data,\n            'has_next': page_obj.has_next(),\n            'has_previous': page_obj.has_previous(),\n            'total_pages': paginator.num_pages,\n        })\n\n# Background task for heavy operations\nfrom celery import shared_task\n\n@shared_task\ndef update_article_statistics():\n    \"\"\"Update article statistics in background\"\"\"\n    stats = Article.objects.aggregate(\n        total_views=Sum('view_count'),\n        avg_views=Avg('view_count')\n    )\n    \n    # Cache the results\n    cache.set('article_stats', stats, timeout=3600)\n    return stats\n```\n\n**Production Deployment Optimizations:**\n\n```python\n# settings/production.py\n# Enable persistent connections\nCONN_MAX_AGE = 60\n\n# Optimize session storage\nSESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'\nSESSION_CACHE_ALIAS = 'default'\n\n# Template caching\nTEMPLATES = [{\n    'BACKEND': 'django.template.backends.django.DjangoTemplates',\n    'OPTIONS': {\n        'loaders': [\n            ('django.template.loaders.cached.Loader', [\n                'django.template.loaders.filesystem.Loader',\n                'django.template.loaders.app_directories.Loader',\n            ]),\n        ],\n    },\n}]\n\n# Logging optimization\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'file': {\n            'level': 'INFO',\n            'class': 'logging.handlers.RotatingFileHandler',\n            'filename': '/var/log/django/app.log',\n            'maxBytes': 1024*1024*10,  # 10MB\n            'backupCount': 5,\n        },\n    },\n    'loggers': {\n        'django': {\n            'handlers': ['file'],\n            'level': 'INFO',\n            'propagate': True,\n        },\n    },\n}\n\n# Disable debug mode optimizations\nDEBUG = False\nTEMPLATE_DEBUG = False\n\n# Security and performance middleware order\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'whitenoise.middleware.WhiteNoiseMiddleware',  # Static files\n    'django.middleware.cache.UpdateCacheMiddleware',  # Cache\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'django.middleware.cache.FetchFromCacheMiddleware',  # Cache\n]\n```\n\n**Performance Monitoring:**\n\n```bash\n# Install monitoring tools\npip install django-debug-toolbar django-silk newrelic\n\n# Use database query analysis\npython manage.py shell\n>>> from django.db import connection\n>>> connection.queries  # View executed queries\n\n# Profile with django-silk\n# Add 'silk' to INSTALLED_APPS\n# Add silk.middleware.SilkyMiddleware to MIDDLEWARE\n```\n\nDjango performance optimization requires a holistic approach covering database design, query optimization, caching strategies, and proper production configuration.",
      "keywords": ["performance", "optimization", "database queries", "caching", "production", "scalability", "profiling"],
      "difficulty": "hard"
    },
    {
      "id": 10019,
      "tag": "django",
      "question": "How do you create custom Django management commands? Explain command structure, argument parsing, and practical use cases for administrative tasks.",
      "answer": "Django management commands are custom command-line tools that extend Django's manage.py functionality. They're essential for administrative tasks, data migration, maintenance operations, and automation in production environments.\n\n**Basic Command Structure:**\n\n```python\n# myapp/management/commands/my_command.py\nfrom django.core.management.base import BaseCommand, CommandError\nfrom django.contrib.auth.models import User\nfrom myapp.models import Article\nimport logging\n\nclass Command(BaseCommand):\n    help = 'Clean up old articles and inactive users'\n    \n    def add_arguments(self, parser):\n        # Positional arguments\n        parser.add_argument('days', type=int, help='Number of days to look back')\n        \n        # Named (optional) arguments\n        parser.add_argument(\n            '--dry-run',\n            action='store_true',\n            help='Show what would be deleted without actually deleting',\n        )\n        \n        parser.add_argument(\n            '--batch-size',\n            type=int,\n            default=1000,\n            help='Number of records to process in each batch',\n        )\n        \n        parser.add_argument(\n            '--exclude-users',\n            nargs='+',\n            type=str,\n            help='List of usernames to exclude from cleanup',\n        )\n        \n        parser.add_argument(\n            '--log-level',\n            choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'],\n            default='INFO',\n            help='Set the logging level',\n        )\n    \n    def handle(self, *args, **options):\n        # Set up logging\n        log_level = getattr(logging, options['log_level'])\n        logging.basicConfig(level=log_level)\n        logger = logging.getLogger(__name__)\n        \n        days = options['days']\n        dry_run = options['dry_run']\n        batch_size = options['batch_size']\n        exclude_users = options.get('exclude_users', [])\n        \n        # Validate arguments\n        if days <= 0:\n            raise CommandError('Days must be a positive integer')\n        \n        self.stdout.write(f\"Starting cleanup for articles older than {days} days\")\n        \n        try:\n            # Clean up old articles\n            deleted_articles = self.cleanup_old_articles(days, dry_run, batch_size)\n            \n            # Clean up inactive users\n            deleted_users = self.cleanup_inactive_users(days, dry_run, exclude_users)\n            \n            if dry_run:\n                self.stdout.write(\n                    self.style.WARNING(\n                        f'DRY RUN: Would delete {deleted_articles} articles and {deleted_users} users'\n                    )\n                )\n            else:\n                self.stdout.write(\n                    self.style.SUCCESS(\n                        f'Successfully deleted {deleted_articles} articles and {deleted_users} users'\n                    )\n                )\n                \n        except Exception as e:\n            logger.error(f'Command failed: {e}')\n            raise CommandError(f'Cleanup failed: {e}')\n    \n    def cleanup_old_articles(self, days, dry_run, batch_size):\n        from datetime import datetime, timedelta\n        from django.utils import timezone\n        \n        cutoff_date = timezone.now() - timedelta(days=days)\n        old_articles = Article.objects.filter(created_at__lt=cutoff_date)\n        \n        total_count = old_articles.count()\n        \n        if dry_run:\n            return total_count\n        \n        deleted_count = 0\n        while True:\n            batch = list(old_articles[:batch_size])\n            if not batch:\n                break\n            \n            Article.objects.filter(id__in=[article.id for article in batch]).delete()\n            deleted_count += len(batch)\n            \n            self.stdout.write(f'Deleted {deleted_count}/{total_count} articles')\n        \n        return deleted_count\n    \n    def cleanup_inactive_users(self, days, dry_run, exclude_users):\n        from datetime import timedelta\n        from django.utils import timezone\n        \n        cutoff_date = timezone.now() - timedelta(days=days)\n        inactive_users = User.objects.filter(\n            last_login__lt=cutoff_date,\n            is_active=True\n        ).exclude(username__in=exclude_users)\n        \n        count = inactive_users.count()\n        \n        if not dry_run:\n            inactive_users.update(is_active=False)\n        \n        return count\n```\n\n**Advanced Command with Progress Tracking:**\n\n```python\n# myapp/management/commands/migrate_data.py\nfrom django.core.management.base import BaseCommand\nfrom django.db import transaction\nfrom django.utils import timezone\nimport csv\nimport os\nfrom tqdm import tqdm\n\nclass Command(BaseCommand):\n    help = 'Migrate data from CSV file to database'\n    \n    def add_arguments(self, parser):\n        parser.add_argument('csv_file', type=str, help='Path to CSV file')\n        \n        parser.add_argument(\n            '--chunk-size',\n            type=int,\n            default=1000,\n            help='Number of records to process at once',\n        )\n        \n        parser.add_argument(\n            '--skip-errors',\n            action='store_true',\n            help='Continue processing even if some records fail',\n        )\n        \n        parser.add_argument(\n            '--update-existing',\n            action='store_true',\n            help='Update existing records instead of creating new ones',\n        )\n    \n    def handle(self, *args, **options):\n        csv_file = options['csv_file']\n        chunk_size = options['chunk_size']\n        skip_errors = options['skip_errors']\n        update_existing = options['update_existing']\n        \n        # Validate file exists\n        if not os.path.exists(csv_file):\n            raise CommandError(f'File {csv_file} does not exist')\n        \n        self.stdout.write(f'Starting data migration from {csv_file}')\n        \n        try:\n            processed, errors = self.process_csv_file(\n                csv_file, chunk_size, skip_errors, update_existing\n            )\n            \n            if errors and not skip_errors:\n                self.stdout.write(\n                    self.style.ERROR(f'Migration failed with {len(errors)} errors')\n                )\n                for error in errors[:10]:  # Show first 10 errors\n                    self.stdout.write(f'  - {error}')\n            else:\n                self.stdout.write(\n                    self.style.SUCCESS(\n                        f'Successfully processed {processed} records'\n                    )\n                )\n                if errors:\n                    self.stdout.write(\n                        self.style.WARNING(f'Skipped {len(errors)} records with errors')\n                    )\n                    \n        except Exception as e:\n            self.stdout.write(self.style.ERROR(f'Migration failed: {e}'))\n            raise CommandError(str(e))\n    \n    def process_csv_file(self, csv_file, chunk_size, skip_errors, update_existing):\n        processed_count = 0\n        errors = []\n        \n        # Count total rows for progress bar\n        with open(csv_file, 'r') as f:\n            total_rows = sum(1 for _ in f) - 1  # Subtract header\n        \n        with open(csv_file, 'r') as f:\n            reader = csv.DictReader(f)\n            records_batch = []\n            \n            # Use tqdm for progress bar\n            with tqdm(total=total_rows, desc='Processing records') as pbar:\n                for row in reader:\n                    try:\n                        record = self.process_row(row, update_existing)\n                        if record:\n                            records_batch.append(record)\n                        \n                        if len(records_batch) >= chunk_size:\n                            self.save_batch(records_batch)\n                            processed_count += len(records_batch)\n                            records_batch = []\n                        \n                        pbar.update(1)\n                        \n                    except Exception as e:\n                        error_msg = f'Row {reader.line_num}: {e}'\n                        errors.append(error_msg)\n                        \n                        if not skip_errors:\n                            raise CommandError(error_msg)\n                        pbar.update(1)\n                \n                # Process remaining records\n                if records_batch:\n                    self.save_batch(records_batch)\n                    processed_count += len(records_batch)\n        \n        return processed_count, errors\n    \n    def process_row(self, row, update_existing):\n        # Validate and transform row data\n        title = row.get('title', '').strip()\n        if not title:\n            raise ValueError('Title is required')\n        \n        # Create or update record\n        article_data = {\n            'title': title,\n            'content': row.get('content', ''),\n            'created_at': timezone.now(),\n        }\n        \n        if update_existing:\n            article, created = Article.objects.update_or_create(\n                title=title,\n                defaults=article_data\n            )\n            return article\n        else:\n            return Article(**article_data)\n    \n    @transaction.atomic\n    def save_batch(self, records):\n        \"\"\"Save a batch of records in a single transaction\"\"\"\n        Article.objects.bulk_create(records, ignore_conflicts=True)\n```\n\n**Interactive Command with User Input:**\n\n```python\n# myapp/management/commands/setup_admin.py\nfrom django.core.management.base import BaseCommand\nfrom django.contrib.auth.models import User, Group, Permission\nfrom django.contrib.contenttypes.models import ContentType\nfrom getpass import getpass\n\nclass Command(BaseCommand):\n    help = 'Interactive setup for admin users and permissions'\n    \n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--non-interactive',\n            action='store_true',\n            help='Run in non-interactive mode using defaults',\n        )\n    \n    def handle(self, *args, **options):\n        interactive = not options['non_interactive']\n        \n        if interactive:\n            self.stdout.write(\n                self.style.SUCCESS('Setting up admin user and permissions')\n            )\n            \n            # Get user input\n            username = input('Enter admin username: ')\n            email = input('Enter admin email: ')\n            password = getpass('Enter admin password: ')\n            confirm_password = getpass('Confirm password: ')\n            \n            if password != confirm_password:\n                raise CommandError('Passwords do not match')\n        else:\n            username = 'admin'\n            email = 'admin@example.com'\n            password = 'admin123'\n        \n        # Create user\n        try:\n            user = User.objects.create_superuser(\n                username=username,\n                email=email,\n                password=password\n            )\n            self.stdout.write(\n                self.style.SUCCESS(f'Created superuser: {username}')\n            )\n        except Exception as e:\n            raise CommandError(f'Failed to create user: {e}')\n        \n        # Setup groups and permissions\n        self.setup_groups_and_permissions()\n        \n        self.stdout.write(\n            self.style.SUCCESS('Admin setup completed successfully')\n        )\n    \n    def setup_groups_and_permissions(self):\n        # Create editor group\n        editor_group, created = Group.objects.get_or_create(name='Editors')\n        \n        if created:\n            # Add permissions to editor group\n            article_ct = ContentType.objects.get_for_model(Article)\n            permissions = Permission.objects.filter(\n                content_type=article_ct,\n                codename__in=['add_article', 'change_article', 'view_article']\n            )\n            editor_group.permissions.set(permissions)\n            \n            self.stdout.write(\n                self.style.SUCCESS('Created Editors group with permissions')\n            )\n```\n\n**Scheduled Task Command:**\n\n```python\n# myapp/management/commands/daily_maintenance.py\nfrom django.core.management.base import BaseCommand\nfrom django.core.mail import send_mail\nfrom django.db.models import Count\nfrom django.utils import timezone\nfrom datetime import timedelta\nimport logging\n\nclass Command(BaseCommand):\n    help = 'Daily maintenance tasks - cleanup, reports, notifications'\n    \n    def add_arguments(self, parser):\n        parser.add_argument(\n            '--tasks',\n            nargs='+',\n            choices=['cleanup', 'reports', 'notifications', 'all'],\n            default=['all'],\n            help='Specific maintenance tasks to run',\n        )\n        \n        parser.add_argument(\n            '--email-reports',\n            action='store_true',\n            help='Send reports via email',\n        )\n    \n    def handle(self, *args, **options):\n        tasks = options['tasks']\n        email_reports = options['email_reports']\n        \n        if 'all' in tasks:\n            tasks = ['cleanup', 'reports', 'notifications']\n        \n        results = {}\n        \n        for task in tasks:\n            try:\n                if task == 'cleanup':\n                    results['cleanup'] = self.run_cleanup()\n                elif task == 'reports':\n                    results['reports'] = self.generate_reports(email_reports)\n                elif task == 'notifications':\n                    results['notifications'] = self.send_notifications()\n                    \n                self.stdout.write(\n                    self.style.SUCCESS(f'Completed task: {task}')\n                )\n                \n            except Exception as e:\n                self.stdout.write(\n                    self.style.ERROR(f'Failed task {task}: {e}')\n                )\n                logging.error(f'Maintenance task {task} failed: {e}')\n        \n        # Summary\n        self.stdout.write('\\nMaintenance Summary:')\n        for task, result in results.items():\n            self.stdout.write(f'  {task}: {result}')\n    \n    def run_cleanup(self):\n        # Clean up old sessions\n        from django.contrib.sessions.models import Session\n        expired_sessions = Session.objects.filter(\n            expire_date__lt=timezone.now()\n        )\n        count = expired_sessions.count()\n        expired_sessions.delete()\n        \n        return f'Cleaned up {count} expired sessions'\n    \n    def generate_reports(self, email_reports):\n        # Generate daily statistics\n        today = timezone.now().date()\n        yesterday = today - timedelta(days=1)\n        \n        daily_stats = {\n            'new_articles': Article.objects.filter(\n                created_at__date=yesterday\n            ).count(),\n            'new_users': User.objects.filter(\n                date_joined__date=yesterday\n            ).count(),\n        }\n        \n        report = f\"Daily Report for {yesterday}:\\n\"\n        report += f\"New Articles: {daily_stats['new_articles']}\\n\"\n        report += f\"New Users: {daily_stats['new_users']}\\n\"\n        \n        if email_reports:\n            send_mail(\n                f'Daily Report - {yesterday}',\n                report,\n                'system@example.com',\n                ['admin@example.com'],\n            )\n        \n        return f'Generated report for {yesterday}'\n    \n    def send_notifications(self):\n        # Send notifications for pending tasks\n        pending_count = 0  # Implement your logic here\n        return f'Sent {pending_count} notifications'\n```\n\n**Usage Examples:**\n\n```bash\n# Basic usage\npython manage.py my_command 30\n\n# With options\npython manage.py my_command 30 --dry-run --batch-size=500 --exclude-users admin staff\n\n# Data migration\npython manage.py migrate_data /path/to/data.csv --chunk-size=2000 --skip-errors\n\n# Interactive setup\npython manage.py setup_admin\n\n# Non-interactive setup\npython manage.py setup_admin --non-interactive\n\n# Daily maintenance\npython manage.py daily_maintenance --tasks cleanup reports --email-reports\n\n# Cron job setup\n# 0 2 * * * /path/to/venv/bin/python /path/to/manage.py daily_maintenance\n```\n\n**Best Practices:**\n- Use proper argument validation and error handling\n- Implement progress tracking for long-running commands\n- Use database transactions for data integrity\n- Add comprehensive logging\n- Support both interactive and non-interactive modes\n- Use batch processing for large datasets\n- Provide meaningful output and error messages\n- Test commands thoroughly before production use\n\nCustom management commands are powerful tools for automating administrative tasks, data management, and maintenance operations in Django applications.",
      "keywords": ["management commands", "BaseCommand", "argument parsing", "automation", "administrative tasks", "CLI"],
      "difficulty": "hard"
    }
  ]
}